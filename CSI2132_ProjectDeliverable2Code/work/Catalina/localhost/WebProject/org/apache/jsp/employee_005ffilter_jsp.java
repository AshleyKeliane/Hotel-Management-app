/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2024-03-30 01:47:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.Objects;
import java.util.Date;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public final class employee_005ffilter_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.Objects");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.time.LocalDate");
    _jspx_imports_classes.add("java.time.format.DateTimeFormatter");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Customer</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"MainStyle.css\">\r\n");
      out.write("            <script>\r\n");
      out.write("                var urlParams = new URLSearchParams(window.location.search);\r\n");
      out.write("                var error = urlParams.get('error');\r\n");
      out.write("                if (error === 'dates') {\r\n");
      out.write("                    alert(\"Error: select a date\");\r\n");
      out.write("                } else if (error === 'invalid'){\r\n");
      out.write("                    alert(\"Error: invalid dates\");\r\n");
      out.write("                }\r\n");
      out.write("            </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("   <nav>\r\n");
      out.write("       <ul>\r\n");
      out.write("           <li><a href=\"index.jsp\">Home</a></li>\r\n");
      out.write("           <li><a href=\"login.jsp\">Login</a></li>\r\n");
      out.write("           <li><a href=\"customer_search.jsp\">Search Rooms</a></li>\r\n");
      out.write("           <li><a href=\"about.jsp\">About Us</a></li>\r\n");
      out.write("       </ul>\r\n");
      out.write("   </nav>\r\n");
      out.write("\r\n");
      out.write("<h1> Search for rooms</h1>\r\n");
      out.write("<div class=\"box_container\">\r\n");
      out.write("    <form id=\"combinedForm\" method=\"post\" class = \"formstuff\">\r\n");
      out.write("\r\n");
      out.write("    <label for=\"roomtypebox\" class=\"labelbox\">Room Size:</label>\r\n");
      out.write("    <select id=\"roomtypebox\" name=\"roomtypebox\">\r\n");
      out.write("      <option value=\"any\">Any</option>\r\n");
      out.write("      <option value=\"Single\">Single</option>\r\n");
      out.write("      <option value=\"Double\">Double</option>\r\n");
      out.write("      <option value=\"Queen\">Queen</option>\r\n");
      out.write("      <option value=\"King\">King</option>\r\n");
      out.write("      <option value=\"Suite\">Suite</option>\r\n");
      out.write("    </select><br>\r\n");
      out.write("\r\n");
      out.write("    <label for=\"pricebox\" class=\"labelbox\">Max Price:</label>\r\n");
      out.write("    <select id=\"pricebox\" name=\"pricebox\">\r\n");
      out.write("      <option value=\"1000\">Any</option>\r\n");
      out.write("      <option value=\"100\">$100</option>\r\n");
      out.write("      <option value=\"200\">$200</option>\r\n");
      out.write("      <option value=\"300\">$300</option>\r\n");
      out.write("      <option value=\"400\">$400</option>\r\n");
      out.write("      <option value=\"500\">$500</option>\r\n");
      out.write("    </select><br>\r\n");
      out.write("\r\n");
      out.write("    <label for=\"checkOutDate\" class=\"labelbox\">Check-Out Date:</label>\r\n");
      out.write("    <input type=\"date\" id=\"checkOutDate\" name=\"checkOutDate\"><br><br>\r\n");
      out.write("\r\n");
      out.write("   <button type=\"submit\" class=\"submitbutton\">Submit</button>\r\n");
      out.write("       </form>\r\n");
      out.write("</div>\r\n");
      out.write("<div class='button-container1'>\r\n");
      out.write("    <button onclick=\"window.location.href='employee.jsp'\" class=\"button1\"> Go back</button>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");

    session.setAttribute("filter1", "no");


     if(session.getAttribute("type").equals("customer")){
         response.sendRedirect("customer.jsp");
     } else if (session.getAttribute("type").equals("admin")){
         response.sendRedirect("admin.jsp");
     } else if (session.getAttribute("type").equals("employee")){

     } else {
        response.sendRedirect("index.jsp");
     }


    if ("POST".equalsIgnoreCase(request.getMethod())) {
        // Retrieve form data from the request
        String roomType = request.getParameter("roomtypebox");
        double price = Double.parseDouble(request.getParameter("pricebox"));
        String checkOutDate = request.getParameter("checkOutDate");

        if (Objects.isNull(checkOutDate) || checkOutDate.isEmpty()) {
              response.sendRedirect("employee_filter.jsp?error=dates");
              return;
        }

        LocalDate formattedCheckOut = LocalDate.parse(checkOutDate);
        LocalDate currentDate = LocalDate.now();

        if (formattedCheckOut.isBefore(currentDate)) {
            response.sendRedirect("employee_filter.jsp?error=invalid");
            return;
        }

        Date formattedCheckOut1 = java.sql.Date.valueOf(checkOutDate);

        session.setAttribute("filter1", "yes");
        session.setAttribute("room1", roomType);
        session.setAttribute("price1", price);
        session.setAttribute("outdate1", formattedCheckOut1);

        response.sendRedirect("employee_search.jsp");
    }

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
